info:
  app:
    organization: leijendary
    artifactId: "@[project.artifactId]"
    name: "@[project.name]"
    description: "@[project.description]"
    version: "@[project.version]"
  api:
    termsOfServiceUrl:
    contact:
      name: Jonathan Leijendekker
      url: https://leijendary.com
      email:
    license:
    licenseUrl:
    vendorExtensions:

auth:
  audience: http://localhost:8080
  realm: IAM Template API v1
  anonymousUser:
    principal: Anonymous User

cors:
  allowCredentials: true
  allowedOrigins:
  allowedOriginPatterns: '*'
  allowedHeaders: '*'
  allowedMethods:
    - get
    - post
    - put
    - patch
    - delete
    - options
    - head
    - trace
  exposedHeaders: '*'

role:
  customer:
    name: Customer

verification:
  # 15 minutes
  expiry: 15
  register:
    url: http://localhost:4000/register/verify/{code}

spring:
  application:
    name: ${info.app.name}
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
      - org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration
  datasource:
    url:
    username:
    password:
    hikari:
      dataSourceProperties:
        cachePrepStmts: true
        rewriteBatchedStatements: true
        useServerPrepStmts: true
      maximumPoolSize: 20
  data:
    web:
      pageable:
        maxPageSize: 100
        oneIndexedParameters: true
  jpa:
    openInView: false
    properties:
      hibernate:
        jdbc:
          batch_size: 1000
  messages:
    basename: messages.access, messages.error, messages.notification, messages.validation
  cache:
    type: redis
  cloud:
    stream:
      bindings:
        userCreate-out-0:
          destination: ${info.app.organization}.user.create
          producer:
            useNativeEncoding: true
        userUpdate-out-0:
          destination: ${info.app.organization}.user.update
          producer:
            useNativeEncoding: true
        userDeactivate-out-0:
          destination: ${info.app.organization}.user.deactivate
          producer:
            useNativeEncoding: true
        notificationSms-out-0:
          destination: ${info.app.organization}.notification.sms
          producer:
            useNativeEncoding: true
      function:
        definition: userCreate;userUpdate;userDeactivate;notificationSms
      kafka:
        binder:
          autoAddPartitions: true
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
            functions:
              userCreate:
                applicationId: ${info.app.artifactId}.${info.app.organization}.user.create
              userUpdate:
                applicationId: ${info.app.artifactId}.${info.app.organization}.user.update
              userDeactivate:
                applicationId: ${info.app.artifactId}.${info.app.organization}.user.deactivate
              notificationSms:
                applicationId: ${info.app.artifactId}.${info.app.organization}.notification.sms
  kafka:
    bootstrapServers:
    consumer:
      keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
      valueDeserializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroDeserializer
    producer:
      keySerializer: org.apache.kafka.common.serialization.StringSerializer
      valueSerializer: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerializer
    properties:
      schema:
        registry:
          url:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwkSetUri:

server:
  compression:
    enabled: true
    mimeTypes: application/json
  error:
    whitelabel:
      enabled: false
  http2:
    enabled: true
  servlet:
    contextPath: /identity
  tomcat:
    relaxedQueryChars: '[,]'
    threads:
      max: 500
