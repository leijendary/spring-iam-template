info:
  app:
    organization: leijendary
    group: ${group}
    name: ${name}
    description: ${description}
    version: ${version}
  api:
    termsOfService:
    contact:
      name: Jonathan Leijendekker
      url: https://leijendary.com
      email:
    license:
      name: Jonathan Leijendekker
      url: https://leijendary.com

auth:
  issuer: https://leijendary.com
  keyId: spring-iam-template
  accessToken:
    expiry: 7D
    privateKey:
    publicKey:
  refreshToken:
    expiry: 200D
    privateKey:
    publicKey:
  social:
    apple:
      clientId:
      issuer: https://appleid.apple.com
      jwkSetUri: https://appleid.apple.com/auth/keys
    facebook:
      url: https://graph.facebook.com/v16.0
      profilePath: /me?fields=id,first_name,last_name,email,picture
    google:
      clientId:
      issuer: https://accounts.google.com
      jwkSetUri: https://www.googleapis.com/oauth2/v3/certs
  system:
    principal: System

encrypt:
  key:
  salt:

verification:
  expiry: 2h
  timeout: 60s
  register:
    template: register-verify
  password:
    nominate:
      template: password-nominate
      url:
    reset:
      template: password-reset
  email:
    template: email-change

spring:
  application:
    name: \${info.app.name}
  cache:
    type: redis
    redis:
      timeToLive: 5h
  cloud:
    aws:
      s3:
        bucketName: leijendary
        signatureDuration: 30m
  datasource:
    primary:
      poolName: Primary
      jdbcUrl:
      username:
      password:
      dataSourceProperties:
        cachePrepStmts: true
        rewriteBatchedStatements: true
        useServerPrepStmts: true
    readonly:
      poolName: Read-only
      jdbcUrl:
      username:
      password:
  data:
    jdbc:
      repositories:
        enabled: false
    redis:
      repositories:
        enabled: false
      host:
      port:
      ssl: true
      username:
      password:
    web:
      pageable:
        maxPageSize: 100
  jpa:
    openInView: false
    properties:
      hibernate:
        globally_quoted_identifiers: true
        jdbc:
          batch_size: 1000
      jakarta:
        persistence:
          lock:
            timeout: 2000
          sharedCache:
            mode: UNSPECIFIED
  kafka:
    bootstrapServers:
    clientId: \${info.app.name}
    consumer:
      groupId: \${info.app.name}
      properties:
        partition:
          assignment:
            strategy: org.apache.kafka.clients.consumer.CooperativeStickyAssignor
    jaas:
      enabled: true
      loginModule: org.apache.kafka.common.security.scram.ScramLoginModule
      options:
        username:
        password:
    producer:
      acks: all
    properties:
      interceptor:
        classes: com.leijendary.spring.template.iam.core.interceptor.KafkaInterceptor
      sasl:
        mechanism: SCRAM-SHA-256
    security:
      protocol: SASL_SSL
    topic:
      notificationEmail:
        name: \${info.app.organization}.notification.email
      notificationPush:
        name: \${info.app.organization}.notification.push
      notificationSms:
        name: \${info.app.organization}.notification.sms
  main:
    bannerMode: log
  messages:
    basename: messages.access, messages.error, messages.notification, messages.validation
  mvc:
    throwExceptionIfNoHandlerFound: true
  web:
    resources:
      addMappings: false

server:
  error:
    whitelabel:
      enabled: false
  http2:
    enabled: true
  port: 80

springdoc:
  pathsToMatch: /api/**
  swaggerUi:
    disableSwaggerDefaultUrl: true

management:
  endpoint:
    health:
      showDetails: ALWAYS
  endpoints:
    web:
      exposure:
        include: '*'
  zipkin:
    tracing:
      endpoint:

logging:
  level:
    liquibase:
      hub: ERROR
    org:
      apache:
        kafka: ERROR
  pattern:
    level: '%5p [\${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
