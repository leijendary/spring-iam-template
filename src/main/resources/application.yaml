info:
  app:
    organization: leijendary
    group: ${group}
    name: ${name}
    description: ${description}
    version: ${version}
  api:
    termsOfService:
    contact:
      name: Jonathan Leijendekker
      url: https://leijendary.com
      email:
    license:
      name: Jonathan Leijendekker
      url: https://leijendary.com

auth:
  audience: https://localhost:8443
  realm: IAM Template API v1
  system:
    principal: System

encrypt:
  key:
  salt:

verification:
  # 15 minutes
  expiry: 15
  register:
    subject: Welcome!
    url: http://localhost:3000/register/verify/{code}
  resetPassword:
    subject: Password Reset
    url: http://localhost:3000/reset/password/{code}

spring:
  application:
    name: \${info.app.name}
  main:
    bannerMode: log
  datasource:
    primary:
      poolName: Primary
      jdbcUrl:
      username:
      password:
      dataSourceProperties:
        cachePrepStmts: true
        rewriteBatchedStatements: true
        useServerPrepStmts: true
      maximumPoolSize: 20
    readonly:
      poolName: Read-only
      jdbcUrl:
      username:
      password:
      maximumPoolSize: 10
  data:
    jdbc:
      repositories:
        enabled: false
    ldap:
      repositories:
        enabled: false
    redis:
      repositories:
        enabled: false
      host:
      port:
    web:
      pageable:
        maxPageSize: 100
  devtools:
    livereload:
      port: 35730
  jmx:
    enabled: true
  jpa:
    openInView: false
    properties:
      hibernate:
        globally_quoted_identifiers: true
        jdbc:
          batch_size: 1000
      jakarta:
        persistence:
          lock:
            timeout: 2000
          sharedCache:
            mode: UNSPECIFIED
  messages:
    basename: messages.error, messages.notification, messages.validation
  mvc:
    throwExceptionIfNoHandlerFound: true
  web:
    resources:
      addMappings: false
  cache:
    type: redis
    redis:
      timeToLive: 5h
  cloud:
    aws:
      credentials:
        instanceProfile: true
      region:
        instanceProfile: true
      s3:
        bucketName: leijendary
  kafka:
    bootstrapServers:
    consumer:
      groupId: \${info.app.name}
    topic:

server:
  error:
    whitelabel:
      enabled: false
  http2:
    enabled: true
  port: 443
  ssl:
    enabled: true
    keyAlias: spring-boot
    keyStoreType: PKCS12
    keyStore: classpath:ssl/keystore.p12
    keyStorePassword: spring-boot

springdoc:
  pathsToMatch: /api/**
  swaggerUi:
    disableSwaggerDefaultUrl: true

management:
  endpoint:
    health:
      showDetails: ALWAYS
  endpoints:
    web:
      exposure:
        include: '*'
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint:

logging:
  level:
    liquibase:
      hub: ERROR
    org:
      apache:
        kafka: ERROR
  pattern:
    level: '%5p [\${spring.application.name:},%X{traceId:-},%X{spanId:-}]'
