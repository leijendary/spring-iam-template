/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.leijendary.spring.iamtemplate.event.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4324224645308274515L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserSchema\",\"namespace\":\"com.leijendary.spring.iamtemplate.event.schema\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"account\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AccountSchema\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}],\"default\":null},{\"name\":\"role\",\"type\":{\"type\":\"record\",\"name\":\"RoleSchema\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastModifiedDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastModifiedBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"firstName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"middleName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"emailAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"countryCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mobileNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"createdBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastModifiedDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastModifiedBy\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserSchema> ENCODER =
      new BinaryMessageEncoder<UserSchema>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserSchema> DECODER =
      new BinaryMessageDecoder<UserSchema>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserSchema> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserSchema> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserSchema> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserSchema>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserSchema to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserSchema from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserSchema instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserSchema fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long id;
   private com.leijendary.spring.iamtemplate.event.schema.AccountSchema account;
   private com.leijendary.spring.iamtemplate.event.schema.RoleSchema role;
   private java.lang.String firstName;
   private java.lang.String middleName;
   private java.lang.String lastName;
   private java.lang.String emailAddress;
   private java.lang.String countryCode;
   private java.lang.String mobileNumber;
   private java.lang.String createdDate;
   private java.lang.String createdBy;
   private java.lang.String lastModifiedDate;
   private java.lang.String lastModifiedBy;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserSchema() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param account The new value for account
   * @param role The new value for role
   * @param firstName The new value for firstName
   * @param middleName The new value for middleName
   * @param lastName The new value for lastName
   * @param emailAddress The new value for emailAddress
   * @param countryCode The new value for countryCode
   * @param mobileNumber The new value for mobileNumber
   * @param createdDate The new value for createdDate
   * @param createdBy The new value for createdBy
   * @param lastModifiedDate The new value for lastModifiedDate
   * @param lastModifiedBy The new value for lastModifiedBy
   */
  public UserSchema(java.lang.Long id, com.leijendary.spring.iamtemplate.event.schema.AccountSchema account, com.leijendary.spring.iamtemplate.event.schema.RoleSchema role, java.lang.String firstName, java.lang.String middleName, java.lang.String lastName, java.lang.String emailAddress, java.lang.String countryCode, java.lang.String mobileNumber, java.lang.String createdDate, java.lang.String createdBy, java.lang.String lastModifiedDate, java.lang.String lastModifiedBy) {
    this.id = id;
    this.account = account;
    this.role = role;
    this.firstName = firstName;
    this.middleName = middleName;
    this.lastName = lastName;
    this.emailAddress = emailAddress;
    this.countryCode = countryCode;
    this.mobileNumber = mobileNumber;
    this.createdDate = createdDate;
    this.createdBy = createdBy;
    this.lastModifiedDate = lastModifiedDate;
    this.lastModifiedBy = lastModifiedBy;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return account;
    case 2: return role;
    case 3: return firstName;
    case 4: return middleName;
    case 5: return lastName;
    case 6: return emailAddress;
    case 7: return countryCode;
    case 8: return mobileNumber;
    case 9: return createdDate;
    case 10: return createdBy;
    case 11: return lastModifiedDate;
    case 12: return lastModifiedBy;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: account = (com.leijendary.spring.iamtemplate.event.schema.AccountSchema)value$; break;
    case 2: role = (com.leijendary.spring.iamtemplate.event.schema.RoleSchema)value$; break;
    case 3: firstName = value$ != null ? value$.toString() : null; break;
    case 4: middleName = value$ != null ? value$.toString() : null; break;
    case 5: lastName = value$ != null ? value$.toString() : null; break;
    case 6: emailAddress = value$ != null ? value$.toString() : null; break;
    case 7: countryCode = value$ != null ? value$.toString() : null; break;
    case 8: mobileNumber = value$ != null ? value$.toString() : null; break;
    case 9: createdDate = value$ != null ? value$.toString() : null; break;
    case 10: createdBy = value$ != null ? value$.toString() : null; break;
    case 11: lastModifiedDate = value$ != null ? value$.toString() : null; break;
    case 12: lastModifiedBy = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public com.leijendary.spring.iamtemplate.event.schema.AccountSchema getAccount() {
    return account;
  }


  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(com.leijendary.spring.iamtemplate.event.schema.AccountSchema value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public com.leijendary.spring.iamtemplate.event.schema.RoleSchema getRole() {
    return role;
  }


  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(com.leijendary.spring.iamtemplate.event.schema.RoleSchema value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.String getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.String value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'middleName' field.
   * @return The value of the 'middleName' field.
   */
  public java.lang.String getMiddleName() {
    return middleName;
  }


  /**
   * Sets the value of the 'middleName' field.
   * @param value the value to set.
   */
  public void setMiddleName(java.lang.String value) {
    this.middleName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'emailAddress' field.
   * @return The value of the 'emailAddress' field.
   */
  public java.lang.String getEmailAddress() {
    return emailAddress;
  }


  /**
   * Sets the value of the 'emailAddress' field.
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.String value) {
    this.emailAddress = value;
  }

  /**
   * Gets the value of the 'countryCode' field.
   * @return The value of the 'countryCode' field.
   */
  public java.lang.String getCountryCode() {
    return countryCode;
  }


  /**
   * Sets the value of the 'countryCode' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.String value) {
    this.countryCode = value;
  }

  /**
   * Gets the value of the 'mobileNumber' field.
   * @return The value of the 'mobileNumber' field.
   */
  public java.lang.String getMobileNumber() {
    return mobileNumber;
  }


  /**
   * Sets the value of the 'mobileNumber' field.
   * @param value the value to set.
   */
  public void setMobileNumber(java.lang.String value) {
    this.mobileNumber = value;
  }

  /**
   * Gets the value of the 'createdDate' field.
   * @return The value of the 'createdDate' field.
   */
  public java.lang.String getCreatedDate() {
    return createdDate;
  }


  /**
   * Sets the value of the 'createdDate' field.
   * @param value the value to set.
   */
  public void setCreatedDate(java.lang.String value) {
    this.createdDate = value;
  }

  /**
   * Gets the value of the 'createdBy' field.
   * @return The value of the 'createdBy' field.
   */
  public java.lang.String getCreatedBy() {
    return createdBy;
  }


  /**
   * Sets the value of the 'createdBy' field.
   * @param value the value to set.
   */
  public void setCreatedBy(java.lang.String value) {
    this.createdBy = value;
  }

  /**
   * Gets the value of the 'lastModifiedDate' field.
   * @return The value of the 'lastModifiedDate' field.
   */
  public java.lang.String getLastModifiedDate() {
    return lastModifiedDate;
  }


  /**
   * Sets the value of the 'lastModifiedDate' field.
   * @param value the value to set.
   */
  public void setLastModifiedDate(java.lang.String value) {
    this.lastModifiedDate = value;
  }

  /**
   * Gets the value of the 'lastModifiedBy' field.
   * @return The value of the 'lastModifiedBy' field.
   */
  public java.lang.String getLastModifiedBy() {
    return lastModifiedBy;
  }


  /**
   * Sets the value of the 'lastModifiedBy' field.
   * @param value the value to set.
   */
  public void setLastModifiedBy(java.lang.String value) {
    this.lastModifiedBy = value;
  }

  /**
   * Creates a new UserSchema RecordBuilder.
   * @return A new UserSchema RecordBuilder
   */
  public static com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder newBuilder() {
    return new com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder();
  }

  /**
   * Creates a new UserSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserSchema RecordBuilder
   */
  public static com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder newBuilder(com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder other) {
    if (other == null) {
      return new com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder();
    } else {
      return new com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder(other);
    }
  }

  /**
   * Creates a new UserSchema RecordBuilder by copying an existing UserSchema instance.
   * @param other The existing instance to copy.
   * @return A new UserSchema RecordBuilder
   */
  public static com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder newBuilder(com.leijendary.spring.iamtemplate.event.schema.UserSchema other) {
    if (other == null) {
      return new com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder();
    } else {
      return new com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserSchema instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserSchema>
    implements org.apache.avro.data.RecordBuilder<UserSchema> {

    private long id;
    private com.leijendary.spring.iamtemplate.event.schema.AccountSchema account;
    private com.leijendary.spring.iamtemplate.event.schema.AccountSchema.Builder accountBuilder;
    private com.leijendary.spring.iamtemplate.event.schema.RoleSchema role;
    private com.leijendary.spring.iamtemplate.event.schema.RoleSchema.Builder roleBuilder;
    private java.lang.String firstName;
    private java.lang.String middleName;
    private java.lang.String lastName;
    private java.lang.String emailAddress;
    private java.lang.String countryCode;
    private java.lang.String mobileNumber;
    private java.lang.String createdDate;
    private java.lang.String createdBy;
    private java.lang.String lastModifiedDate;
    private java.lang.String lastModifiedBy;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.account)) {
        this.account = data().deepCopy(fields()[1].schema(), other.account);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAccountBuilder()) {
        this.accountBuilder = com.leijendary.spring.iamtemplate.event.schema.AccountSchema.newBuilder(other.getAccountBuilder());
      }
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasRoleBuilder()) {
        this.roleBuilder = com.leijendary.spring.iamtemplate.event.schema.RoleSchema.newBuilder(other.getRoleBuilder());
      }
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.middleName)) {
        this.middleName = data().deepCopy(fields()[4].schema(), other.middleName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastName)) {
        this.lastName = data().deepCopy(fields()[5].schema(), other.lastName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[6].schema(), other.emailAddress);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[7].schema(), other.countryCode);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[8].schema(), other.mobileNumber);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[9].schema(), other.createdDate);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[10].schema(), other.createdBy);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[11].schema(), other.lastModifiedDate);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.lastModifiedBy)) {
        this.lastModifiedBy = data().deepCopy(fields()[12].schema(), other.lastModifiedBy);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing UserSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(com.leijendary.spring.iamtemplate.event.schema.UserSchema other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.account)) {
        this.account = data().deepCopy(fields()[1].schema(), other.account);
        fieldSetFlags()[1] = true;
      }
      this.accountBuilder = null;
      if (isValidValue(fields()[2], other.role)) {
        this.role = data().deepCopy(fields()[2].schema(), other.role);
        fieldSetFlags()[2] = true;
      }
      this.roleBuilder = null;
      if (isValidValue(fields()[3], other.firstName)) {
        this.firstName = data().deepCopy(fields()[3].schema(), other.firstName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.middleName)) {
        this.middleName = data().deepCopy(fields()[4].schema(), other.middleName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastName)) {
        this.lastName = data().deepCopy(fields()[5].schema(), other.lastName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[6].schema(), other.emailAddress);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[7].schema(), other.countryCode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[8].schema(), other.mobileNumber);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.createdDate)) {
        this.createdDate = data().deepCopy(fields()[9].schema(), other.createdDate);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[10].schema(), other.createdBy);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[11].schema(), other.lastModifiedDate);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.lastModifiedBy)) {
        this.lastModifiedBy = data().deepCopy(fields()[12].schema(), other.lastModifiedBy);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public com.leijendary.spring.iamtemplate.event.schema.AccountSchema getAccount() {
      return account;
    }


    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setAccount(com.leijendary.spring.iamtemplate.event.schema.AccountSchema value) {
      validate(fields()[1], value);
      this.accountBuilder = null;
      this.account = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'account' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.leijendary.spring.iamtemplate.event.schema.AccountSchema.Builder getAccountBuilder() {
      if (accountBuilder == null) {
        if (hasAccount()) {
          setAccountBuilder(com.leijendary.spring.iamtemplate.event.schema.AccountSchema.newBuilder(account));
        } else {
          setAccountBuilder(com.leijendary.spring.iamtemplate.event.schema.AccountSchema.newBuilder());
        }
      }
      return accountBuilder;
    }

    /**
     * Sets the Builder instance for the 'account' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setAccountBuilder(com.leijendary.spring.iamtemplate.event.schema.AccountSchema.Builder value) {
      clearAccount();
      accountBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'account' field has an active Builder instance
     * @return True if the 'account' field has an active Builder instance
     */
    public boolean hasAccountBuilder() {
      return accountBuilder != null;
    }

    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearAccount() {
      account = null;
      accountBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public com.leijendary.spring.iamtemplate.event.schema.RoleSchema getRole() {
      return role;
    }


    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setRole(com.leijendary.spring.iamtemplate.event.schema.RoleSchema value) {
      validate(fields()[2], value);
      this.roleBuilder = null;
      this.role = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'role' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.leijendary.spring.iamtemplate.event.schema.RoleSchema.Builder getRoleBuilder() {
      if (roleBuilder == null) {
        if (hasRole()) {
          setRoleBuilder(com.leijendary.spring.iamtemplate.event.schema.RoleSchema.newBuilder(role));
        } else {
          setRoleBuilder(com.leijendary.spring.iamtemplate.event.schema.RoleSchema.newBuilder());
        }
      }
      return roleBuilder;
    }

    /**
     * Sets the Builder instance for the 'role' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setRoleBuilder(com.leijendary.spring.iamtemplate.event.schema.RoleSchema.Builder value) {
      clearRole();
      roleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'role' field has an active Builder instance
     * @return True if the 'role' field has an active Builder instance
     */
    public boolean hasRoleBuilder() {
      return roleBuilder != null;
    }

    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearRole() {
      role = null;
      roleBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.String getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setFirstName(java.lang.String value) {
      validate(fields()[3], value);
      this.firstName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'middleName' field.
      * @return The value.
      */
    public java.lang.String getMiddleName() {
      return middleName;
    }


    /**
      * Sets the value of the 'middleName' field.
      * @param value The value of 'middleName'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setMiddleName(java.lang.String value) {
      validate(fields()[4], value);
      this.middleName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'middleName' field has been set.
      * @return True if the 'middleName' field has been set, false otherwise.
      */
    public boolean hasMiddleName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'middleName' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearMiddleName() {
      middleName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setLastName(java.lang.String value) {
      validate(fields()[5], value);
      this.lastName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'emailAddress' field.
      * @return The value.
      */
    public java.lang.String getEmailAddress() {
      return emailAddress;
    }


    /**
      * Sets the value of the 'emailAddress' field.
      * @param value The value of 'emailAddress'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setEmailAddress(java.lang.String value) {
      validate(fields()[6], value);
      this.emailAddress = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'emailAddress' field has been set.
      * @return True if the 'emailAddress' field has been set, false otherwise.
      */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'emailAddress' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryCode' field.
      * @return The value.
      */
    public java.lang.String getCountryCode() {
      return countryCode;
    }


    /**
      * Sets the value of the 'countryCode' field.
      * @param value The value of 'countryCode'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setCountryCode(java.lang.String value) {
      validate(fields()[7], value);
      this.countryCode = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'countryCode' field has been set.
      * @return True if the 'countryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'countryCode' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearCountryCode() {
      countryCode = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumber' field.
      * @return The value.
      */
    public java.lang.String getMobileNumber() {
      return mobileNumber;
    }


    /**
      * Sets the value of the 'mobileNumber' field.
      * @param value The value of 'mobileNumber'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setMobileNumber(java.lang.String value) {
      validate(fields()[8], value);
      this.mobileNumber = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumber' field has been set.
      * @return True if the 'mobileNumber' field has been set, false otherwise.
      */
    public boolean hasMobileNumber() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'mobileNumber' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearMobileNumber() {
      mobileNumber = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdDate' field.
      * @return The value.
      */
    public java.lang.String getCreatedDate() {
      return createdDate;
    }


    /**
      * Sets the value of the 'createdDate' field.
      * @param value The value of 'createdDate'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setCreatedDate(java.lang.String value) {
      validate(fields()[9], value);
      this.createdDate = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'createdDate' field has been set.
      * @return True if the 'createdDate' field has been set, false otherwise.
      */
    public boolean hasCreatedDate() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'createdDate' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearCreatedDate() {
      createdDate = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdBy' field.
      * @return The value.
      */
    public java.lang.String getCreatedBy() {
      return createdBy;
    }


    /**
      * Sets the value of the 'createdBy' field.
      * @param value The value of 'createdBy'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setCreatedBy(java.lang.String value) {
      validate(fields()[10], value);
      this.createdBy = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'createdBy' field has been set.
      * @return True if the 'createdBy' field has been set, false otherwise.
      */
    public boolean hasCreatedBy() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'createdBy' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearCreatedBy() {
      createdBy = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastModifiedDate' field.
      * @return The value.
      */
    public java.lang.String getLastModifiedDate() {
      return lastModifiedDate;
    }


    /**
      * Sets the value of the 'lastModifiedDate' field.
      * @param value The value of 'lastModifiedDate'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setLastModifiedDate(java.lang.String value) {
      validate(fields()[11], value);
      this.lastModifiedDate = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'lastModifiedDate' field has been set.
      * @return True if the 'lastModifiedDate' field has been set, false otherwise.
      */
    public boolean hasLastModifiedDate() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'lastModifiedDate' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearLastModifiedDate() {
      lastModifiedDate = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastModifiedBy' field.
      * @return The value.
      */
    public java.lang.String getLastModifiedBy() {
      return lastModifiedBy;
    }


    /**
      * Sets the value of the 'lastModifiedBy' field.
      * @param value The value of 'lastModifiedBy'.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder setLastModifiedBy(java.lang.String value) {
      validate(fields()[12], value);
      this.lastModifiedBy = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'lastModifiedBy' field has been set.
      * @return True if the 'lastModifiedBy' field has been set, false otherwise.
      */
    public boolean hasLastModifiedBy() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'lastModifiedBy' field.
      * @return This builder.
      */
    public com.leijendary.spring.iamtemplate.event.schema.UserSchema.Builder clearLastModifiedBy() {
      lastModifiedBy = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserSchema build() {
      try {
        UserSchema record = new UserSchema();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        if (accountBuilder != null) {
          try {
            record.account = this.accountBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("account"));
            throw e;
          }
        } else {
          record.account = fieldSetFlags()[1] ? this.account : (com.leijendary.spring.iamtemplate.event.schema.AccountSchema) defaultValue(fields()[1]);
        }
        if (roleBuilder != null) {
          try {
            record.role = this.roleBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("role"));
            throw e;
          }
        } else {
          record.role = fieldSetFlags()[2] ? this.role : (com.leijendary.spring.iamtemplate.event.schema.RoleSchema) defaultValue(fields()[2]);
        }
        record.firstName = fieldSetFlags()[3] ? this.firstName : (java.lang.String) defaultValue(fields()[3]);
        record.middleName = fieldSetFlags()[4] ? this.middleName : (java.lang.String) defaultValue(fields()[4]);
        record.lastName = fieldSetFlags()[5] ? this.lastName : (java.lang.String) defaultValue(fields()[5]);
        record.emailAddress = fieldSetFlags()[6] ? this.emailAddress : (java.lang.String) defaultValue(fields()[6]);
        record.countryCode = fieldSetFlags()[7] ? this.countryCode : (java.lang.String) defaultValue(fields()[7]);
        record.mobileNumber = fieldSetFlags()[8] ? this.mobileNumber : (java.lang.String) defaultValue(fields()[8]);
        record.createdDate = fieldSetFlags()[9] ? this.createdDate : (java.lang.String) defaultValue(fields()[9]);
        record.createdBy = fieldSetFlags()[10] ? this.createdBy : (java.lang.String) defaultValue(fields()[10]);
        record.lastModifiedDate = fieldSetFlags()[11] ? this.lastModifiedDate : (java.lang.String) defaultValue(fields()[11]);
        record.lastModifiedBy = fieldSetFlags()[12] ? this.lastModifiedBy : (java.lang.String) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserSchema>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserSchema>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserSchema>
    READER$ = (org.apache.avro.io.DatumReader<UserSchema>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    if (this.account == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.account.customEncode(out);
    }

    this.role.customEncode(out);

    if (this.firstName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.firstName);
    }

    if (this.middleName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.middleName);
    }

    if (this.lastName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lastName);
    }

    if (this.emailAddress == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.emailAddress);
    }

    if (this.countryCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.countryCode);
    }

    if (this.mobileNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.mobileNumber);
    }

    out.writeString(this.createdDate);

    out.writeString(this.createdBy);

    out.writeString(this.lastModifiedDate);

    out.writeString(this.lastModifiedBy);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.account = null;
      } else {
        if (this.account == null) {
          this.account = new com.leijendary.spring.iamtemplate.event.schema.AccountSchema();
        }
        this.account.customDecode(in);
      }

      if (this.role == null) {
        this.role = new com.leijendary.spring.iamtemplate.event.schema.RoleSchema();
      }
      this.role.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.firstName = null;
      } else {
        this.firstName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.middleName = null;
      } else {
        this.middleName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastName = null;
      } else {
        this.lastName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.emailAddress = null;
      } else {
        this.emailAddress = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.countryCode = null;
      } else {
        this.countryCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.mobileNumber = null;
      } else {
        this.mobileNumber = in.readString();
      }

      this.createdDate = in.readString();

      this.createdBy = in.readString();

      this.lastModifiedDate = in.readString();

      this.lastModifiedBy = in.readString();

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.account = null;
          } else {
            if (this.account == null) {
              this.account = new com.leijendary.spring.iamtemplate.event.schema.AccountSchema();
            }
            this.account.customDecode(in);
          }
          break;

        case 2:
          if (this.role == null) {
            this.role = new com.leijendary.spring.iamtemplate.event.schema.RoleSchema();
          }
          this.role.customDecode(in);
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.firstName = null;
          } else {
            this.firstName = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.middleName = null;
          } else {
            this.middleName = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastName = null;
          } else {
            this.lastName = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.emailAddress = null;
          } else {
            this.emailAddress = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.countryCode = null;
          } else {
            this.countryCode = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.mobileNumber = null;
          } else {
            this.mobileNumber = in.readString();
          }
          break;

        case 9:
          this.createdDate = in.readString();
          break;

        case 10:
          this.createdBy = in.readString();
          break;

        case 11:
          this.lastModifiedDate = in.readString();
          break;

        case 12:
          this.lastModifiedBy = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










